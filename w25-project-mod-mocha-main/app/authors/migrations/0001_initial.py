# Generated by Django 5.1.6 on 2025-04-01 21:03

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ForeignAuthor',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=255)),
                ('host', models.URLField()),
                ('global_id', models.URLField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ForeignFollowRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.URLField()),
                ('display_name', models.CharField(default='unknown', max_length=255)),
                ('followee', models.UUIDField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.URLField(unique=True)),
                ('username', models.CharField(default='unknown', max_length=255)),
                ('password', models.CharField(default=1234, max_length=255)),
                ('display_name', models.CharField(default='unknown', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('inbox_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('type', models.CharField(default='author', max_length=100)),
                ('global_id', models.URLField(blank=True)),
                ('host', models.URLField()),
                ('github', models.URLField(blank=True, null=True)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('global_id', models.URLField(blank=True, unique=True)),
                ('comment', models.TextField()),
                ('content_type', models.CharField(default='text/plain', max_length=50)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='authors.author')),
            ],
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('global_id', models.URLField(blank=True, unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_likes', to='authors.author')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_likes', to='authors.comment')),
            ],
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=10)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followee', to='authors.author')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to='authors.author')),
            ],
        ),
        migrations.CreateModel(
            name='ForeignFriend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_1', models.URLField()),
                ('author_2', models.URLField()),
            ],
            options={
                'unique_together': {('author_1', 'author_2')},
            },
        ),
        migrations.CreateModel(
            name='ForeignPost',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('global_id', models.URLField(unique=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('content_type', models.CharField(default='text/plain', max_length=50)),
                ('visibility', models.CharField(default='PUBLIC', max_length=10)),
                ('published', models.DateTimeField()),
                ('image_base64', models.TextField(blank=True, null=True)),
                ('foreign_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foreign_posts', to='authors.foreignauthor')),
            ],
        ),
        migrations.CreateModel(
            name='ForeignComments',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('content_type', models.CharField(default='text/plain', max_length=50)),
                ('published', models.DateTimeField()),
                ('foreign_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authors.foreignauthor')),
                ('foreign_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foreign_comments', to='authors.foreignpost')),
            ],
        ),
        migrations.CreateModel(
            name='ForeignPostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('published', models.DateTimeField()),
                ('foreign_authors', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authors.foreignauthor')),
                ('foreign_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foreign_likes', to='authors.foreignpost')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('global_id', models.URLField(blank=True, unique=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='post_images/')),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain Text'), ('text/markdown', 'Markdown'), ('image/png;base64', 'PNG Image'), ('image/jpeg;base64', 'JPEG Image')], default='text/plain', max_length=50)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('UNLISTED', 'Unlisted'), ('PRIVATE', 'Private'), ('DELETED', 'Deleted')], default='PUBLIC', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='authors.author')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='authors.post'),
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('global_id', models.URLField(blank=True, unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to='authors.author')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to='authors.post')),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to='authors.author')),
                ('author_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends_with', to='authors.author')),
            ],
            options={
                'unique_together': {('author_1', 'author_2')},
            },
        ),
    ]
